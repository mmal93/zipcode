{"version":3,"file":"component---src-pages-page-slug-tsx-38a26b3991336bbcd050.js","mappings":"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","sources":["webpack://zipcode/./src/components/WPGBlocks/index.tsx","webpack://zipcode/./src/components/WPGBlocks/About.tsx","webpack://zipcode/./src/components/WPGBlocks/Careers.tsx","webpack://zipcode/./src/components/WPGBlocks/Philosophy.tsx","webpack://zipcode/./src/components/BannerPoup.tsx","webpack://zipcode/./src/pages/{Page.slug}.tsx"],"sourcesContent":["import * as React from 'react'\nimport { GetTheBlock } from '../blocks'\nimport { IWPGBlocksProps, IWPGBlockProps } from './types'\n\nconst WPGBlocks: React.FunctionComponent<IWPGBlocksProps> = ({ blocks, mapToBlock }) => {\n    return (\n        <>\n            {blocks && blocks.filter(block => {\n                return !!block.name}).map((block, index) => <WPGBlock key={index} order={`${index}`} block={block} mapToBlock={mapToBlock} />)\n            }\n        </>\n    )\n}\n\nexport const WPGBlock: React.FunctionComponent<IWPGBlockProps> = ({ block, mapToBlock }) => {\n\n  const {\n    name,\n    attributes,\n    innerBlocks,\n    innerHTML } = block\n\n  if (!name) return null\n\n  if (mapToBlock) (WPGBlock as any).MapToBlock = mapToBlock\n\n  let TheBlock = (WPGBlock as any).MapToBlock ? (WPGBlock as any).MapToBlock(name) : null\n  if (!TheBlock) TheBlock = GetTheBlock(name)\n\n  if (!TheBlock) return null\n\n  if (name.includes('acf/')) {\n    const {data} = attributes\n    return <TheBlock blockName={name} attributes={data} />\n  }\n\n  return (\n    <TheBlock blockName={name} attributes={attributes} innerBlocks={innerBlocks} innerHTML={innerHTML} />\n  )\n}\n\nexport default WPGBlocks\n","import * as React from 'react'\nimport { GetTheBlock } from '../blocks'\nimport { IWPGBlocksProps, IWPGBlockProps } from './types'\nimport { useEffect } from 'react';\nimport { handleGeneralOverlayAnimation } from '../../animation';\n\nconst AboutBlocks: React.FunctionComponent<IWPGBlocksProps> = ({ blocks, mapToBlock }) => {\n\n  useEffect(() => {\n    setTimeout(handleGeneralOverlayAnimation, 1000)\n\n  }, [])\n  return (\n    <div className=\"about-page\">\n      {blocks.filter(block => {\n        return !!block.name\n      }).map((block, index) =>\n        <div key={index} className={`${block.name.includes('marquee') ? \"initial-height\" : \"\"} ${index !== blocks.length - 1 ? \"overlay-animation\" : \"end-overlay-animation\"}`}>\n          <AboutBlock order={`${index}`} block={block} mapToBlock={mapToBlock} />\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport const AboutBlock: React.FunctionComponent<IWPGBlockProps> = ({ order, block, mapToBlock }) => {\n\n  const {\n    name,\n    attributes\n  } = block\n\n  if (!name) return null\n\n  if (mapToBlock) (AboutBlock as any).MapToBlock = mapToBlock\n\n  let TheBlock = (AboutBlock as any).MapToBlock ? (AboutBlock as any).MapToBlock(name) : null\n  if (!TheBlock) TheBlock = GetTheBlock(name)\n\n  if (!TheBlock) return null\n\n  if (name.includes('acf/')) {\n    // custom blocks\n    switch (name) {\n      case 'acf/banner-text-has-animation':\n        return (\n          <section className=\"about-banner-top about-section  bg-black\">\n            <TheBlock order={order} blockName={name} attributes={attributes.data} />\n          </section>\n        )\n      case 'acf/our-team':\n      case 'acf/box-image':\n        return (\n          <section className=\"about-our-teams about-section\">\n            <TheBlock order={order} blockName={name} attributes={attributes.data} />\n          </section>\n        )\n      case 'acf/text-center-with-link':\n        return (\n          <section className=\"about-banner-cta about-section\">\n            <TheBlock blockName={name} attributes={attributes.data} />\n          </section>\n        )\n      default:\n        return (\n          <TheBlock blockName={name} attributes={attributes.data} />\n        )\n    }\n  }\n\n  return (\n    <TheBlock blockName={name} attributes={attributes} />\n  )\n}\n\nexport default AboutBlocks\n","import * as React from 'react'\nimport { GetTheBlock } from '../blocks'\nimport { IWPGBlocksProps, IWPGBlockProps } from './types'\nimport { useEffect } from 'react';\nimport { handleGeneralOverlayAnimation } from '../../animation';\n\nconst CareersBlocks: React.FunctionComponent<IWPGBlocksProps> = ({ blocks, mapToBlock }) => {\n\n  useEffect(() => {\n    setTimeout(handleGeneralOverlayAnimation, 1000)\n  }, [])\n  return (\n    <>\n      {blocks.filter(block => {\n        return !!block.name\n      }).map((block, index) =>\n        <div key={index} className={`${block.name.includes('marquee') ? \"initial-height\" : \"\"} ${index !== blocks.length - 1 ? \"overlay-animation\" : \"end-overlay-animation\"}`}>\n          <CareersBlock key={index} order={`${index}`} block={block} mapToBlock={mapToBlock} />\n        </div>\n      )\n      }\n    </>\n  )\n}\n\nexport const CareersBlock: React.FunctionComponent<IWPGBlockProps> = ({ block, mapToBlock }) => {\n\n  const {\n    name,\n    attributes\n  } = block\n\n  if (!name) return null\n\n  if (mapToBlock) (CareersBlock as any).MapToBlock = mapToBlock\n\n  let TheBlock = (CareersBlock as any).MapToBlock ? (CareersBlock as any).MapToBlock(name) : null\n  if (!TheBlock) TheBlock = GetTheBlock(name)\n\n  if (!TheBlock) return null\n\n  if (name.includes('acf/')) {\n    // custom blocks\n    switch (name) {\n      case 'acf/our-team':\n      case 'acf/box-image':\n        return (\n          <section className=\"career-perks careers-section \">\n            <TheBlock blockName={name} attributes={attributes.data} />\n          </section>\n        )\n      case 'acf/text-center-with-link':\n        return (\n          <section className=\"about-banner-cta about-section\">\n            <TheBlock blockName={name} attributes={attributes.data} />\n          </section>\n        )\n      default:\n        return (\n          <TheBlock blockName={name} attributes={attributes.data} />\n        )\n    }\n  }\n\n  return (\n    <TheBlock blockName={name} attributes={attributes} />\n  )\n}\n\nexport default CareersBlocks\n","import * as React from 'react'\nimport { GetTheBlock } from '../blocks'\nimport { IWPGBlocksProps, IWPGBlockProps } from './types'\nimport { handleGeneralOverlayAnimation } from '../../animation'\nimport { useEffect } from 'react';\n\nconst PhilosophyBlocks: React.FunctionComponent<IWPGBlocksProps> = ({ blocks, mapToBlock }) => {\n    useEffect(() => {\n        setTimeout(handleGeneralOverlayAnimation, 1000)\n\n    }, [])\n    return (\n        <>\n            {blocks.filter(block => {\n                return !!block.name\n            }).map((block, index) =>\n                <PhilosophyBlock key={index} order={`${index}`} block={block} mapToBlock={mapToBlock} />\n            )}\n        </>\n    )\n}\n\nexport const PhilosophyBlock: React.FunctionComponent<IWPGBlockProps> = ({ block, mapToBlock }) => {\n\n    const {\n        name,\n        attributes\n    } = block\n\n    if (!name) return null\n\n    if (mapToBlock) (PhilosophyBlock as any).MapToBlock = mapToBlock\n\n    let TheBlock = (PhilosophyBlock as any).MapToBlock ? (PhilosophyBlock as any).MapToBlock(name) : null\n    if (!TheBlock) TheBlock = GetTheBlock(name)\n\n    if (!TheBlock) return null\n    switch (name) {\n        case 'acf/banner-with-image-right':\n            return (\n                <div className=\"phi-banner overlay-animation\">\n                    <TheBlock blockName={name} attributes={attributes.data} />\n                </div>\n            )\n        case 'acf/number-text-image-repeater':\n            return (\n                <TheBlock blockName={name} attributes={attributes.data} />\n            )\n        default:\n            return (\n                <TheBlock blockName={name} attributes={attributes} />\n            )\n    }\n}\n\nexport default PhilosophyBlocks\n","import React, { useState, useEffect } from \"react\";\r\nimport { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport { Navigation } from \"swiper/modules\";\r\nimport { IImage } from \"./blocks/types\";\r\n\r\ninterface IBannerPoupProps {\r\n    background: string;\r\n    content: {\r\n        small_text: string;\r\n        line: {\r\n            text: string;\r\n            image: IImage;\r\n        }[];\r\n        popup_description: string;\r\n        popup_slider: {\r\n            image: IImage;\r\n            text: string;\r\n        }[];\r\n    }[];\r\n}\r\n\r\nexport const BannerPoup = (attributes: IBannerPoupProps): JSX.Element => {\r\n    const { background, content } = attributes;\r\n    \r\n    console.log(content);\r\n\r\n    content.map((list, index) => {\r\n        console.log(list);\r\n    });\r\n\r\n    const [openPopUp, setOpenPopUp] = useState(false);\r\n\r\n    const popupOverlay = async () => {\r\n        setOpenPopUp(false);\r\n        document.querySelector('html')?.classList.remove('active-overlay');\r\n        const popupItems: HTMLElement[] = Array.from(document.querySelectorAll(\".projects-popup-item\"));\r\n        popupItems.forEach((item: HTMLElement) => {\r\n            item?.classList.remove('active-popup');\r\n        });\r\n        const popupItemsContent: HTMLElement[] = Array.from(document.querySelectorAll(\".projects-popup\"));\r\n        popupItemsContent.forEach((item: HTMLElement) => {\r\n            item?.classList.remove('active-popup');\r\n        });\r\n    }   \r\n\r\n    return (\r\n        <>\r\n            { (content) &&\r\n                <div className=\"projects-popup-main\">\r\n                    {\r\n                        content.map((list, index) =>\r\n                        <div className={`projects-popup projects-popup-${index}`} id={`projects-popup-${index}`}>\r\n                            <div className=\"poup-overlay\" onClick={() => popupOverlay()}></div>\r\n                            <div className=\"projects-popup-container\" style={{backgroundImage: \"url(\"+background+\")\"}}>\r\n                                <div className=\"container\">\r\n                                    <button className=\"projects-popup-close\" onClick={() => popupOverlay()}>\r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"29\" viewBox=\"0 0 32 29\" fill=\"none\">\r\n                                            <line y1=\"-1.06719\" x2=\"39.2529\" y2=\"-1.06719\" transform=\"matrix(0.724999 0.688749 -0.724999 0.688749 1.54163 1.86035)\" stroke=\"#C4F000\" strokeWidth=\"2.13437\"/>\r\n                                            <line y1=\"-1.06719\" x2=\"39.2529\" y2=\"-1.06719\" transform=\"matrix(0.724999 -0.688749 0.724999 0.688749 1.54163 28.8958)\" stroke=\"#C4F000\" strokeWidth=\"2.13437\"/>\r\n                                        </svg>\r\n                                    </button>\r\n                                    <div className=\"popup-heading\">\r\n                                        { (list.small_text || list.popup_description) && \r\n                                            <div className=\"heading\">\r\n                                                <h4 dangerouslySetInnerHTML={{__html: list.line.reduce((p,c) => {\r\n                                                    return p + c.text + \" \";\r\n                                                }, '')}} />\r\n                                                <div className=\"subheading\">{list.popup_description}</div>\r\n                                            </div>\r\n                                        }\r\n                                        <div className=\"popup-galleries\">\r\n                                            <Swiper                                \r\n                                                modules={[Navigation]}\r\n                                                spaceBetween={20}\r\n                                                slidesPerView=\"auto\"\r\n                                                breakpoints={{\r\n                                                    0: {\r\n                                                        slidesPerView: 1,\r\n                                                        spaceBetween: 100,\r\n                                                    },\r\n                                                    1199:{\r\n                                                        slidesPerView: 1,\r\n                                                        spaceBetween: 100,\r\n                                                    },\r\n                                                    1200: {\r\n                                                        slidesPerView: \"auto\",\r\n                                                        spaceBetween: 18,\r\n                                                    }\r\n                                                }}\r\n                                                navigation\r\n                                            >\r\n                                                { list.popup_slider.map((item, itemIndex) => (\r\n                                                    <SwiperSlide>\r\n                                                        { (item.image.src) && \r\n                                                            <div className=\"item-gallery\" key={itemIndex}>\r\n                                                                <img\r\n                                                                    loading=\"lazy\"\r\n                                                                    srcSet={`${item.image.src}`} className=\"img\"\r\n                                                                    alt={list.small_text}\r\n                                                                />\r\n                                                            </div>\r\n                                                        }\r\n                                                        { (item.text) && \r\n                                                            <div className=\"popup-content visible-mobile\" dangerouslySetInnerHTML={{__html: item.text}} />\r\n                                                        }\r\n                                                    </SwiperSlide>\r\n                                                ))}\r\n                                            </Swiper>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"popup-content visible-desktop\">\r\n                                        { list.popup_slider.map((item, itemIndex) => (\r\n                                            (item.text) && \r\n                                                <div className=\"column\" key={itemIndex} dangerouslySetInnerHTML={{__html: item.text}} />\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BannerPoup;","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Seo from 'gatsby-plugin-wpgraphql-seo';\nimport Layout from \"../components/layout\"\nimport WPGBlocks from \"../components/WPGBlocks\"\nimport AboutBlocks from \"../components/WPGBlocks/About\";\nimport CareersBlocks from \"../components/WPGBlocks/Careers\";\nimport PhilosophyBlocks from \"../components/WPGBlocks/Philosophy\";\nimport BannerPoup from \"../components/BannerPoup\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useEffect, useState } from \"react\";\n\nexport default function Page({params}: {params: {slug: string}}) {\n  \n  const slug = params.slug;\n  const getPageInfo = gql`\n  query getPageInfo {\n    nodeByUri(uri: \"${slug}\") {\n      id\n      ... on Page {\n        title\n        slug\n        uri\n        blocks\n        seo {\n          title\n          metaDesc\n          focuskw\n          metaKeywords\n          metaRobotsNoindex\n          metaRobotsNofollow\n          opengraphTitle\n          opengraphDescription\n          opengraphImage {\n            altText\n            sourceUrl\n            srcSet\n          }\n          twitterTitle\n          twitterDescription\n          twitterImage {\n            altText\n            sourceUrl\n            srcSet\n          }\n          canonical\n          cornerstone\n          schema {\n            articleType\n            pageType\n            raw\n          }\n        }\n      }\n    }\n  }\n  `;\n  const { loading, error, data } = useQuery(getPageInfo);\n\n  //State\n  const [blocks, setBlocks] = useState([]);\n  const [post, setPost] = useState({});\n  const [content, setPostContent] = useState({});\n  //useEffect\n  useEffect(() => {\n    if (data) {\n      setBlocks(data.nodeByUri.blocks);\n      setPost(data.nodeByUri);\n      setPostContent(data.nodeByUri.content);\n    }\n  }, [data]);\n\n  if (!blocks || blocks.length === 0) {\n    return (\n      <>\n        <Seo post={post} />\n        <Layout>\n          <div className=\"container\">\n            <div className=\"page-content\" dangerouslySetInnerHTML={{__html:content}} />\n          </div>\n        </Layout>\n      </>\n    )\n  }\n  switch (slug) {\n    case 'about':\n      return (\n        <>\n          <Seo post={post} />\n          <Layout>\n            <AboutBlocks blocks={blocks} />\n          </Layout>\n        </>\n      )\n    case 'careers':\n      return (\n        <>\n          <Seo post={post} />\n          <Layout>\n            <CareersBlocks blocks={blocks} />\n          </Layout>\n        </>\n      )\n    case 'philosophy':\n      return (\n        <>\n          <Seo post={post} />\n          <Layout>\n            <PhilosophyBlocks blocks={blocks} />\n          </Layout>\n        </>\n      )\n    case 'projects':\n      return (\n        <>\n          <Seo post={post} />\n          {(blocks && blocks.length > 0) && blocks.filter((block: any) => block.name === 'acf/projects-banner').map((block: any, index: number) => {\n\n            return (\n              <BannerPoup\n                key={index}\n                background=\"https://wordpress-897316-4088707.cloudwaysapps.com/headless/wp-content/uploads/2024/02/projects-popup-bkg-1-1.jpg\"\n                content={block.attributes.data.content} />\n            )\n          })}\n          <Layout>\n            <WPGBlocks blocks={blocks} />\n          </Layout>\n        </>\n      )\n    default:\n      return (\n        <>\n          <Seo post={post} />\n          <Layout>\n            <div className=\"container\">\n              <WPGBlocks blocks={blocks} />\n            </div>\n          </Layout>\n        </>\n      )\n  }\n}\n\n// export const pageQuery = graphql`\n//     query GET_PAGE($slug: String!) {\n//         wpPage: wpPage(slug: { eq: $slug }) {\n//             nodeType\n//             title\n//             slug\n//             uri\n//             seo {\n//                 title\n//                 metaDesc\n//                 focuskw\n//                 metaKeywords\n//                 metaRobotsNoindex\n//                 metaRobotsNofollow\n//                 opengraphTitle\n//                 opengraphDescription\n//                 opengraphImage {\n//                     altText\n//                     sourceUrl\n//                     srcSet\n//                 }\n//                 twitterTitle\n//                 twitterDescription\n//                 twitterImage {\n//                     altText\n//                     sourceUrl\n//                     srcSet\n//                 }\n//                 canonical\n//                 cornerstone\n//                 schema {\n//                     articleType\n//                     pageType\n//                     raw\n//                 }\n//             }\n//         }\n//         pageDetail: allWpPage(filter: {slug: {eq: $slug}}) {\n//           nodes {\n//             title\n//             blocks\n//           }\n//         }\n//     }\n// `;"],"names":["WPGBlock","_ref2","block","mapToBlock","name","attributes","innerBlocks","innerHTML","MapToBlock","TheBlock","GetTheBlock","includes","data","React","blockName","_ref","blocks","filter","map","index","key","order","AboutBlock","className","useEffect","setTimeout","handleGeneralOverlayAnimation","length","CareersBlock","PhilosophyBlock","background","content","console","log","list","openPopUp","setOpenPopUp","useState","popupOverlay","async","document","querySelector","_document$querySelect","classList","remove","Array","from","querySelectorAll","forEach","item","id","onClick","style","backgroundImage","xmlns","width","height","viewBox","fill","y1","x2","y2","transform","stroke","strokeWidth","small_text","popup_description","dangerouslySetInnerHTML","__html","line","reduce","p","c","text","Swiper","modules","Navigation","spaceBetween","slidesPerView","breakpoints","navigation","popup_slider","itemIndex","SwiperSlide","image","src","loading","srcSet","alt","Page","params","slug","getPageInfo","gql","error","useQuery","setBlocks","post","setPost","setPostContent","nodeByUri","Seo","Layout","AboutBlocks","CareersBlocks","PhilosophyBlocks","BannerPoup","WPGBlocks"],"sourceRoot":""}