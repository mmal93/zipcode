{"version":3,"file":"component---src-pages-index-tsx-34633d20b82d5a9342bf.js","mappings":"gNASA,MAyDaA,EAAqDC,IAAmC,IAAlC,MAAEC,EAAK,MAAEC,EAAK,WAAEC,GAAY,EAE7F,MAAM,KAAEC,EAAI,WAAEC,GAAeH,EAE7B,IAAKE,EAAM,OAAO,KAEdD,IAAaJ,EAAkBO,WAAaH,GAEhD,IAAII,EAAYR,EAAkBO,WAAcP,EAAkBO,WAAWF,GAAQ,KAIrF,OAFKG,IAAUA,GAAWC,EAAAA,EAAAA,GAAYJ,IAEjCG,EAEDH,EAAKK,SAAS,QAGT,2BADCL,EAGFM,EAAAA,cAACH,EAAQ,CAACN,MAAOA,EAAOU,UAAWP,EAAMC,WAAYA,EAAWO,OAIhEF,EAAAA,cAACH,EAAQ,CAACI,UAAWP,EAAMC,WAAYA,EAAWO,OAMxDF,EAAAA,cAACH,EAAQ,CAACI,UAAWP,EAAMC,WAAYA,IAjBnB,IAiBiC,EAIzD,I,EAAA,EA1F6DQ,IAA6B,IAA5B,OAAEC,EAAM,WAAEX,GAAY,EAI9EY,EAAuB,GACvBD,GAAUA,EAAOE,OAAS,GAC5BD,EAAqBE,KAAKH,EAAO,IACjCC,EAAqBE,KAAKH,EAAO,KACxBA,GAA4B,IAAlBA,EAAOE,QAC1BD,EAAqBE,KAAKH,EAAO,IAGnC,MAAMI,EAAwBJ,EAAOK,QAAO,CAACjB,EAAOkB,IAC3CA,EAAQ,IAGXC,GAAYC,EAAAA,EAAAA,QAAO,OAGnB,EAACC,EAAY,EAACC,IAAkBC,EAAAA,EAAAA,UAASX,GAa/C,OAXAY,EAAAA,EAAAA,YAAU,KAERF,EAAeV,GACXO,EAAUM,SAAWb,GAAUA,EAAOE,OAAS,GACjDY,YAAW,MACTC,EAAAA,EAAAA,KAAwB,GACvB,IACL,GAGC,CAACf,IAEFJ,EAAAA,cAAAA,MAAAA,CAAKoB,UAAU,gBAAgBC,IAAKV,GAClCX,EAAAA,cAAAA,MAAAA,CAAKoB,UAAU,sCAEfpB,EAAAA,cAAAA,MAAAA,CAAKoB,UAAU,2BAA2B,aAAW,OAClDf,EAAqBI,QAAQjB,KACnBA,EAAME,OACd4B,KAAI,CAAC9B,EAAOkB,IACbV,EAAAA,cAACX,EAAS,CAACkC,IAAKb,EAAOnB,MAAK,GAAKmB,EAASlB,MAAOA,EAAOC,WAAYA,OAIxEO,EAAAA,cAAAA,MAAAA,CAAKoB,UAAU,mCAAmC,aAAW,OAC1DZ,EAAsBC,QAAO,CAACjB,EAAOgC,MAC3BhC,EAAME,OACd4B,KAAI,CAAC9B,EAAOkB,IACbV,EAAAA,cAAAA,MAAAA,CAAKuB,IAAKb,EAAQL,EAAqBC,OAAQc,UAAS,0BAA2BV,EAAQ,IACzFV,EAAAA,cAACX,EAAS,CAACE,MAAK,IAAKmB,EAAQ,EAAIL,EAAqBC,QAAUd,MAAOA,EAAOC,WAAYA,QAI5F,E,oBCcV,MAhEwCU,IAA+C,IAA5CD,MAAQuB,OAAQC,EAAMC,GAAIC,IAAa,EAEhF,MAAMC,GAAcC,EAAAA,EAAAA,IAAG,+xBAyCjB,QAAEC,EAAO,MAAEC,EAAK,KAAE9B,IAAS+B,EAAAA,EAAAA,GAASJ,IAGpC,EAACzB,EAAM,EAAE8B,IAAanB,EAAAA,EAAAA,UAAS,IAQrC,OANAC,EAAAA,EAAAA,YAAU,KACJd,GACFgC,EAAUhC,EAAKiC,UAAU/B,OAC3B,GACC,CAACF,IAGFF,EAAAA,cAAAA,EAAAA,SAAAA,KACEA,EAAAA,cAACoC,EAAAA,GAAG,CAACC,KAAMX,IACX1B,EAAAA,cAACsC,EAAAA,EAAM,KACLtC,EAAAA,cAACuC,EAAU,CAACnC,OAAQA,KAErB,C","sources":["webpack://zipcode/./src/components/WPGBlocks/Home.tsx","webpack://zipcode/./src/pages/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport { GetTheBlock } from '../blocks'\nimport { IWPGBlocksProps, IWPGBlockProps } from './types'\nimport { useRef, useEffect, useState } from \"react\";\nimport \"../../assets/sass/homepage.sass\";\nimport { handleOverlayAnimation } from '../../animation';\n\n\n\nconst HomeBlocks: React.FunctionComponent<IWPGBlocksProps> = ({ blocks, mapToBlock }) => {\n\n\n  // move first 2 blocks to first animation\n  let firstAnimatoinBlocks = [];\n  if (blocks && blocks.length > 1) {\n    firstAnimatoinBlocks.push(blocks[0]);\n    firstAnimatoinBlocks.push(blocks[1]);\n  } else if (blocks && blocks.length === 1) {\n    firstAnimatoinBlocks.push(blocks[0]);\n  }\n\n  const secondAnimatoinBlocks = blocks.filter((block, index) => {\n    return index > 1\n  });\n\n  const container = useRef(null);\n\n  // State\n  const [blocksState, setBlocksState] = useState(blocks);\n  \n  useEffect(() => {\n    // Set the blocks state\n    setBlocksState(blocks);\n    if (container.current && blocks && blocks.length > 0) {\n      setTimeout(() => {\n        handleOverlayAnimation();\n      }, 1000);\n    }\n    // if (!container) return;\n\n  }, [blocks]);\n  return (\n    <div className=\"scrollTrigger\" ref={container}>\n      <div className=\"scroll-section header-placeholder\" ></div>\n\n      <div className=\"scroll-section pinning-1\" data-speed=\"0.2\">\n        {firstAnimatoinBlocks.filter((block) => {\n          return !!block.name\n        }).map((block, index) =>\n          <HomeBlock key={index} order={`${index}`} block={block} mapToBlock={mapToBlock} />\n        )\n        }\n      </div>\n      <div className=\"scroll-section pinning-2 company\" data-speed=\"0.3\">\n        {secondAnimatoinBlocks.filter((block, ind) => {\n          return !!block.name\n        }).map((block, index) =>\n          <div key={index + firstAnimatoinBlocks.length} className={`relative-section item-${index + 1}`}>\n            <HomeBlock order={`${index + 1 + firstAnimatoinBlocks.length}`} block={block} mapToBlock={mapToBlock} />\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport const HomeBlock: React.FunctionComponent<IWPGBlockProps> = ({ order, block, mapToBlock }) => {\n\n  const { name, attributes } = block\n\n  if (!name) return null\n\n  if (mapToBlock) (HomeBlock as any).MapToBlock = mapToBlock\n\n  let TheBlock = (HomeBlock as any).MapToBlock ? (HomeBlock as any).MapToBlock(name) : null\n\n  if (!TheBlock) TheBlock = GetTheBlock(name)\n\n  if (!TheBlock) return null\n\n  if (name.includes('acf/')) {\n    // custom blocks\n    switch (name) {\n      case 'acf/banner-text-center':\n        return (\n          <TheBlock order={order} blockName={name} attributes={attributes.data} />\n        )\n      default:\n        return (\n          <TheBlock blockName={name} attributes={attributes.data} />\n        )\n    }\n  }\n\n  return (\n    <TheBlock blockName={name} attributes={attributes} />\n  )\n}\n\nexport default HomeBlocks\n","import * as React from \"react\";\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport { IPageProps } from \"../shared/model/IPageProps\";\nimport Seo from \"gatsby-plugin-wpgraphql-seo\";\nimport HomeBlocks from \"../components/WPGBlocks/Home\";\nimport \"../assets/sass/homepage.sass\";\n\n// import { GET_FORMINATOR_FORM } from '../data'\nimport { gql, useQuery } from '@apollo/client';\nimport { useEffect, useRef, useState } from \"react\";\n\nconst IndexPage: React.FC<IPageProps> = ({ data: { wpPage: page, wp: form } }: any) => {\n\n  const getPageInfo = gql`\n  query getPageInfo {\n    nodeByUri(uri: \"/\") {\n      id\n      ... on Page {\n        title\n        uri\n        blocks\n        seo {\n          title\n          metaDesc\n          focuskw\n          metaKeywords\n          metaRobotsNoindex\n          metaRobotsNofollow\n          opengraphTitle\n          opengraphDescription\n          opengraphImage {\n            altText\n            sourceUrl\n            srcSet\n          }\n          twitterTitle\n          twitterDescription\n          twitterImage {\n            altText\n            sourceUrl\n            srcSet\n          }\n          canonical\n          cornerstone\n          schema {\n            articleType\n            pageType\n            raw\n          }\n        }\n      }\n    }\n  }\n  `;\n  const { loading, error, data } = useQuery(getPageInfo);\n\n  //State\n  const [blocks, setBlocks] = useState([]);\n  //useEffect\n  useEffect(() => {\n    if (data) {\n      setBlocks(data.nodeByUri.blocks);\n    }\n  }, [data]);\n\n  return (\n    <>\n      <Seo post={page} />\n      <Layout>\n        <HomeBlocks blocks={blocks} />\n      </Layout >\n    </>\n  );\n};\n\nexport default IndexPage;\n\nexport const query = graphql`\n  query {\n    wp {\n      getForminatorFormById\n    }\n    wpPage(isFrontPage: {eq: true}) {\n      nodeType\n      title\n      uri\n      blocks\n      seo {\n        title\n        metaDesc\n        focuskw\n        metaKeywords\n        metaRobotsNoindex\n        metaRobotsNofollow\n        opengraphTitle\n        opengraphDescription\n        opengraphImage {\n          altText\n          sourceUrl\n          srcSet\n        }\n        twitterTitle\n        twitterDescription\n        twitterImage {\n          altText\n          sourceUrl\n          srcSet\n        }\n        canonical\n        cornerstone\n        schema {\n          articleType\n          pageType\n          raw\n        }\n      }\n    }\n  }\n`"],"names":["HomeBlock","_ref2","order","block","mapToBlock","name","attributes","MapToBlock","TheBlock","GetTheBlock","includes","React","blockName","data","_ref","blocks","firstAnimatoinBlocks","length","push","secondAnimatoinBlocks","filter","index","container","useRef","blocksState","setBlocksState","useState","useEffect","current","setTimeout","handleOverlayAnimation","className","ref","map","key","ind","wpPage","page","wp","form","getPageInfo","gql","loading","error","useQuery","setBlocks","nodeByUri","Seo","post","Layout","HomeBlocks"],"sourceRoot":""}