{"version":3,"file":"4253-edaacea0860d78f09107.js","mappings":"kLAIO,MAAMA,EAAyBC,IAA2G,IAA1G,UAACC,EAAS,WAAEC,GAA2E,EAC1H,MAAM,MAAEC,EAAK,MAAEC,GAAUF,EAgCzB,OA/BAG,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAgCC,SAASC,cAAc,oBACvDC,EAAgCF,SAASG,iBAAiB,aAEhE,SAASC,IACLF,EAASG,SAASC,IACd,MAAMC,EAAqBD,EAAQE,UACnCF,SAAAA,EAASG,MAAMC,YAAY,cAAkBH,EAAU,MACnDI,OAAOC,WAAa,IACpBN,EAAQO,iBAAiB,aAAa,KAClCP,EAAQQ,UAAUC,IAAI,UACtBhB,SAAAA,EAAWe,UAAUC,IAAI,iBAAiB,IAG9CT,EAAQO,iBAAiB,SAAS,KAC9BP,EAAQQ,UAAUE,OAAO,UACzBjB,SAAAA,EAAWe,UAAUE,OAAO,iBAAiB,IAGrDV,EAAQO,iBAAiB,cAAc,KACnCP,EAAQQ,UAAUG,OAAO,UACzBlB,SAAAA,EAAWe,UAAUG,OAAO,iBAAiB,GAC/C,GAEV,CACAb,IACAO,OAAOE,iBAAiB,UAAU,SAASK,GACvCd,GACJ,IAAG,EAAK,IAIRe,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,aACXD,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,mBACXD,EAAAA,cAAAA,KAAAA,CAAIE,wBAAyB,CAACC,OAAQ1B,KACtCuB,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,WACXD,EAAAA,cAAAA,MAAAA,CAAKC,UAAU,mBACVvB,EAAM0B,KAAI,CAACC,EAAMC,IAEVD,EAAKA,OACDA,EAAKE,MACDP,EAAAA,cAAAA,EAAAA,SAAAA,KAAEA,EAAAA,cAAAA,OAAAA,CAAMC,UAAU,WAAWO,IAAKF,GAAQD,EAAKA,KAAKL,EAAAA,cAAAA,MAAAA,CAAKS,QAAQ,OAAOC,OAAQL,EAAKE,MAAMI,IAAKC,IAAI,MAAY,KAEhHZ,EAAAA,cAAAA,EAAAA,SAAAA,KAAGK,EAAKA,KAAK,WAOvC,EAId,W","sources":["webpack://zipcode/./src/components/blocks/custom/BannerTextHasAnimation.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"./banner-top.sass\";\r\nimport { IBannerTextHasAnimationProps } from \"../types\";\r\n\r\nexport const BannerTextHasAnimation = ({blockName, attributes} : {blockName: string, attributes: IBannerTextHasAnimationProps}): JSX.Element => {\r\n    const { label, texts } = attributes;\r\n    useEffect(() => {\r\n        const ttContent: HTMLElement | null = document.querySelector(\".content-tooltip\");\r\n        const ttImages: NodeListOf<Element> = document.querySelectorAll('.tt-image');\r\n\r\n        function ttImagesTooltip() {\r\n            ttImages.forEach((ttImage: Element) => {\r\n                const ttImageTop: number = ttImage.offsetTop;\r\n                ttImage?.style.setProperty('--offsetTop', `${ttImageTop}px`);\r\n                if (window.innerWidth > 768) {\r\n                    ttImage.addEventListener('mouseover', () => {\r\n                        ttImage.classList.add('active');\r\n                        ttContent?.classList.add('tooltip-active');\r\n                    }) \r\n                }  else {\r\n                    ttImage.addEventListener('click', () => {\r\n                        ttImage.classList.toggle(\"active\");\r\n                        ttContent?.classList.toggle('tooltip-active');\r\n                    }) \r\n                }         \r\n                ttImage.addEventListener('mouseleave', () => {\r\n                    ttImage.classList.remove('active');\r\n                    ttContent?.classList.remove('tooltip-active');\r\n                })\r\n            });\r\n        }\r\n        ttImagesTooltip();\r\n        window.addEventListener('resize', function(event) {\r\n            ttImagesTooltip();\r\n        }, true);\r\n    })\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"section-content\">\r\n                <h1 dangerouslySetInnerHTML={{__html: label}} />\r\n                <div className=\"content\">\r\n                    <div className=\"content-tooltip\">\r\n                        {texts.map((text, index) => {\r\n                            return (\r\n                                text.text && (\r\n                                    text.image ? \r\n                                        <><span className=\"tt-image\" key={index}>{text.text}<img loading=\"lazy\" srcSet={text.image.src} alt=\"\" /></span> </>\r\n                                    :\r\n                                        <>{text.text} </>\r\n                                )\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BannerTextHasAnimation;\r\n"],"names":["BannerTextHasAnimation","_ref","blockName","attributes","label","texts","useEffect","ttContent","document","querySelector","ttImages","querySelectorAll","ttImagesTooltip","forEach","ttImage","ttImageTop","offsetTop","style","setProperty","window","innerWidth","addEventListener","classList","add","toggle","remove","event","React","className","dangerouslySetInnerHTML","__html","map","text","index","image","key","loading","srcSet","src","alt"],"sourceRoot":""}