{"version":3,"file":"5448-5e919d3a225d7832f838.js","mappings":"8JAIA,MAUaA,EAAoDC,IAA4B,IAA3B,MAAEC,EAAK,WAAEC,GAAY,EAErF,MAAM,KACJC,EAAI,WACJC,EAAU,YACVC,EAAW,UACXC,GAAcL,EAEhB,IAAKE,EAAM,OAAO,KAEdD,IAAaH,EAAiBQ,WAAaL,GAE/C,IAAIM,EAAYT,EAAiBQ,WAAcR,EAAiBQ,WAAWJ,GAAQ,KAGnF,GAFKK,IAAUA,GAAWC,EAAAA,EAAAA,GAAYN,KAEjCK,EAAU,OAAO,KAEtB,GAAIL,EAAKO,SAAS,QAAS,CACzB,MAAM,KAACC,GAAQP,EACf,OAAOQ,EAAAA,cAACJ,EAAQ,CAACK,UAAWV,EAAMC,WAAYO,GAChD,CAEA,OACEC,EAAAA,cAACJ,EAAQ,CAACK,UAAWV,EAAMC,WAAYA,EAAYC,YAAaA,EAAaC,UAAWA,GAAa,EAIzG,IArC4DQ,IAA6B,IAA5B,OAAEC,EAAM,WAAEb,GAAY,EAC/E,OACIU,EAAAA,cAAAA,EAAAA,SAAAA,KACKG,GAAUA,EAAOC,QAAOf,KACZA,EAAME,OAAOc,KAAI,CAAChB,EAAOiB,IAAUN,EAAAA,cAACb,EAAQ,CAACoB,IAAKD,EAAOE,MAAK,GAAKF,EAASjB,MAAOA,EAAOC,WAAYA,MAEpH,C,sDCmBX,UAzB6CmB,IAC3C,MAAM,YAEJhB,GAEEgB,EAEJ,IAAKC,MAAMC,QAAQlB,GAEjB,OADAmB,QAAQC,KAAK,mCACN,KAGT,MAAMC,EAAOrB,EAAYsB,OAEnBC,EAAUvB,EAAYY,KAAI,CAACY,EAAKC,IAAOlB,EAAAA,cAAAA,MAAAA,CAAKmB,UAAS,oBAAqBD,EAAG,GAAC,WACjFD,EAAIxB,YAAYY,KAAI,CAAChB,EAAO+B,IAAOpB,EAAAA,cAACb,EAAAA,EAAQ,CAACoB,IAAKa,EAAI/B,MAAOA,SAGhE,OACEW,EAAAA,cAAAA,MAAAA,CAAKmB,UAAS,wBAA0BL,EAAI,YACzCE,EACG,C","sources":["webpack://zipcode/./src/components/WPGBlocks/index.tsx","webpack://zipcode/./src/components/blocks/layout/columns.tsx"],"sourcesContent":["import * as React from 'react'\nimport { GetTheBlock } from '../blocks'\nimport { IWPGBlocksProps, IWPGBlockProps } from './types'\n\nconst WPGBlocks: React.FunctionComponent<IWPGBlocksProps> = ({ blocks, mapToBlock }) => {\n    return (\n        <>\n            {blocks && blocks.filter(block => {\n                return !!block.name}).map((block, index) => <WPGBlock key={index} order={`${index}`} block={block} mapToBlock={mapToBlock} />)\n            }\n        </>\n    )\n}\n\nexport const WPGBlock: React.FunctionComponent<IWPGBlockProps> = ({ block, mapToBlock }) => {\n\n  const {\n    name,\n    attributes,\n    innerBlocks,\n    innerHTML } = block\n\n  if (!name) return null\n\n  if (mapToBlock) (WPGBlock as any).MapToBlock = mapToBlock\n\n  let TheBlock = (WPGBlock as any).MapToBlock ? (WPGBlock as any).MapToBlock(name) : null\n  if (!TheBlock) TheBlock = GetTheBlock(name)\n\n  if (!TheBlock) return null\n\n  if (name.includes('acf/')) {\n    const {data} = attributes\n    return <TheBlock blockName={name} attributes={data} />\n  }\n\n  return (\n    <TheBlock blockName={name} attributes={attributes} innerBlocks={innerBlocks} innerHTML={innerHTML} />\n  )\n}\n\nexport default WPGBlocks\n","import { IWPGBlock } from '../../WPGBlocks/types'\nimport * as React from 'react'\nimport { WPGBlock } from '../../WPGBlocks'\n\nconst WPGColumnsBlock:React.FC<IWPGBlock> = (props) => {\n  const {\n    // attrs,\n    innerBlocks,\n    // innerHTML\n  } = props\n\n  if (!Array.isArray(innerBlocks)) {\n    console.warn('Columns should have innerBlocks')\n    return null\n  }\n\n  const cols = innerBlocks.length\n\n  const columns = innerBlocks.map((col, ci) => <div className={`wp-block-column ${ci+1}-column`}>\n    {col.innerBlocks.map((block, bi) => <WPGBlock key={bi} block={block}/>)}\n  </div>)\n\n  return (\n    <div className={`wp-block-columns has-${cols}-columns`}>\n      {columns}\n    </div>\n  )\n}\n\nexport default WPGColumnsBlock"],"names":["WPGBlock","_ref2","block","mapToBlock","name","attributes","innerBlocks","innerHTML","MapToBlock","TheBlock","GetTheBlock","includes","data","React","blockName","_ref","blocks","filter","map","index","key","order","props","Array","isArray","console","warn","cols","length","columns","col","ci","className","bi"],"sourceRoot":""}